{
  "name": "osc",
  "main": "src/platforms/osc-node.js",
  "version": "2.1.0",
  "description": "A JavaScript Open Sound Control (OSC) library that works in Node.js and the browser.",
  "author": {
    "name": "Colin Clark"
  },
  "homepage": "https://github.com/colinbdclark/osc.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/colinbdclark/osc.js.git"
  },
  "bugs": {
    "url": "https://github.com/colinbdclark/osc.js/issues"
  },
  "license": "(MIT OR GPL-2.0)",
  "keywords": [
    "Open Sound Control",
    "OSC",
    "sound",
    "audio",
    "music",
    "Web Socket",
    "UDP",
    "serial",
    "TCP"
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "jquery": "2.2.3",
    "infusion": "2.0.0-dev.20161002T002156Z.a2802df",
    "requirejs": "2.2.0",
    "node-jqunit": "1.1.4",
    "grunt": "~1.0.1",
    "grunt-contrib-concat": "~1.0.1",
    "grunt-contrib-uglify": "~1.0.1",
    "grunt-contrib-clean": "~1.0.0",
    "grunt-contrib-jshint": "~1.0.0"
  },
  "dependencies": {
    "wolfy87-eventemitter": "5.0.0",
    "long": "3.1.0",
    "serialport": "4.0.3",
    "slip": "1.0.2",
    "ws": "1.1.0"
  },
  "scripts": {
    "test": "node tests/node-all-tests.js && grunt && npm run browser-test",
    "browser-test": "testem ci --file tests/testem.json",
    "electron-test": "cd tests/electron-tests && ./build-for-electron.sh && node_modules/.bin/electron .",
    "clean-test": "./clean-npm.sh && npm install && npm test"
  },
  "gitHead": "d83bc86983d71f1fdc214b8ec037abd3663dbe26",
  "readme": "osc.js\n======\n\nosc.js is a library for reading and writing [Open Sound Control](http://opensoundcontrol.org) messages in JavaScript. It works in both Node.js and in a web browser.\n\nWhy osc.js?\n-----------\n\nThere are several other OSC libraries available for JavaScript. However, most depend on Node.js-specific APIs. This means that they can't be run in a browser or on web-only platforms such as Chrome OS. osc.js uses only cross-platform APIs (`TypedArrays` and `DataView`), ensuring that it can run in any modern JavaScript environment.\n\nosc.js is fast, comprehensive, fully spec-compliant, tested, modular, and provides a wide variety of optional transports for sending and receiving OSC data.\n\nWhat Does it Do?\n----------------\n\nosc.js reads and writes OSC-formatted binary data into plain JavaScript objects. It provides adaptors for Node.js Buffer objects as well as standard ArrayBuffers.\n\nThe core of osc.js is transport agnostic. You can receive OSC data in whatever manner works best for your application: serial port APIs such as node-serialport or chrome.serial, socket APIs such as Node.js dgram or WebRTC data channels, WebSockets or binary XHR messages should all work. Connect osc.js up to your source of incoming/outgoing data, and you're all set. This approach is consistent with the design of Open Sound Control as a _content format_ that is independent from its means of transport.\n\nIn addition to the low-level encoder/decoder functions, osc.js also provides a comprehensive set of transport objects, called <code>Port</code>s, for use in standard browsers, Chrome Apps, and Node.js applications. These include:\n\n<table>\n    <tr>\n        <th>Transport</th>\n        <th>Supported Platforms</th>\n    </tr>\n    <tr>\n        <td>UDP</td>\n        <td>Node.js, Chrome Apps</td>\n    </tr>\n    <tr>\n        <td>Serial port</td>\n        <td>Node.js, Chrome Apps</td>\n    </tr>\n    <tr>\n        <td>Web Sockets</td>\n        <td>Browsers, Node.js, Chrome Apps</td>\n    </tr>\n    <tr>\n        <td>TCP</td>\n        <td>Node.js</td>\n    </tr>\n</table>\n\nFor stream-based protocols such as serial and TCP, osc.js will take care of SLIP framing for you.\n\nStatus\n------\n\nosc.js supports all OSC 1.0 and 1.1 required and optional types.\n\nHow it Works\n------------\n\nosc.js consists of two distinct layers:\n\n1. The transports, which provide a simple EventEmitter-style API for sending an receiving OSC packets using a variety of transports such as UDP and Web Sockets.\n2. The underlying stateless API that provides functions for reading and writing OSC packets.\n\n\nPort API\n--------\n\n### Methods\n\nAll <code>osc.Port</code> objects implement the following supported methods:\n\n<table>\n    <tr>\n        <th>Method</th>\n        <th>Description</th>\n        <th>Arguments</th>\n    </tr>\n    <tr>\n        <td><code>send</code></td>\n        <td>Sends an OSC package (either a message or a bundle) on this Port.</td>\n        <td>\n            <code>packet</code>: the OSC message or bundle to send<br />\n        </td>\n    </tr>\n</table>\n\n### Events\n\nAll <code>osc.Port</code>s implement the [Event Emitter API](https://nodejs.org/api/events.html). The following events are supported:\n\n<table>\n    <tr>\n        <th>Event</th>\n        <th>Description</th>\n        <th>Arguments</th>\n    </tr>\n    <tr>\n        <td><code>message</code></td>\n        <td>Fires whenever an OSC message is received by the Port.</td>\n        <td>\n            <code>message</code>: the OSC message received; <br />\n            <code>timeTag</code>: the time tag specified by the sender (may be <code>undefined</code> for non-bundle messages); <br />\n            <code>info</code>an implementation-specific remote information object\n        </td>\n    </tr>\n    <tr>\n        <td><code>bundle</code></td>\n        <td>Fires whenever an OSC bundle is received. Subsequent <code>bundle</code> and/or <code>message</code> events will be fired for each sub-packet in the bundle.</td>\n        <td>\n            <code>bundle</code>: the OSC bundle received; <br />\n            <code>timeTag</code>: the time tag specified by the sender; <br />\n            <code>info</code>an implementation-specific remote information object\n        </td>\n    </tr>\n    <tr>\n        <td><code>osc</code></td>\n        <td>Fires whenever any type of OSC packet is recieved by this Port.</td>\n        <td>\n            <code>packet</code>: the OSC message or bundle received<br />\n            <code>info</code>an implementation-specific remote information object\n        </td>\n    </tr>\n    <tr>\n        <td><code>raw</code></td>\n        <td>Fires whenever any data is recieved by this Port.</td>\n        <td>\n            <code>data</code>: an Uint8Array containing the raw data received<br />\n            <code>info</code>an implementation-specific remote information object\n        </td>\n    </tr>\n    <tr>\n        <td><code>error</code></td>\n        <td>Fires whenever an error occurs.</td>\n        <td>\n            <code>error</code>: the Error object that was raised\n        </td>\n    </tr>\n</table>\n\n\nExamples\n--------\n\nIn-depth example osc.js applications for the browser, Node.js, and Chrome OS are available in the [osc.js examples repository](https://github.com/colinbdclark/osc.js-examples).\n\n### Web Sockets in the Browser\n\nThe <code>osc.WebSocketPort</code> object supports sending and receiving\nOSC messages over Web Sockets.\n\n#### Options\n\n<table>\n    <tr>\n        <th>Property</th>\n        <th>Description</th>\n        <th>Default Value</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>The Web Socket URL to connect to (required for clients)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>socket</td>\n        <td>A Web Socket instance to bind to (optional); if supplied, it is your job to configure and open it appropriately</td>\n        <td>none</td>\n    </tr>\n</table>\n\n#### Sample Code\n\n_More code examples showing how osc.js can be used in browser-based, Node.js, and Chrome App applications can be found in the [osc.js examples repository](https://github.com/colinbdclark/osc.js-examples)._\n\n##### Including osc.js in your HTML page:\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>osc.js Web Sockets</title>\n        <meta charset=\"UTF-8\" />\n        <script src=\"bower_components/osc.js/dist/osc-browser.min.js\"></script>\n    </head>\n    <body></body>\n</html>\n```\n\n##### Creating an OSC Web Socket Port object:\n```javascript\nvar oscPort = new osc.WebSocketPort({\n    url: \"ws://localhost:8081\" // URL to your Web Socket server.\n});\n```\n\n##### Opening the Port:\n```javascript\noscPort.open();\n```\n\n##### Listening for incoming OSC messages:\n```javascript\noscPort.on(\"message\", function (oscMsg) {\n    console.log(\"An OSC message just arrived!\", oscMsg);\n});\n```\n\n##### Sending OSC messages:\n```javascript\n// For most Ports, send() should only be called after the \"open\" event fires.\noscPort.send({\n    address: \"/carrier/frequency\",\n    args: 440\n});\n```\n\n##### Sending OSC bundles:\n```javascript\noscPort.send({\n    timeTag: osc.timeTag(60), // Schedules this bundle 60 seconds from now.\n    packets: [\n        {\n            address: \"/carrier/frequency\",\n            args: 440\n        },\n        {\n            address: \"/carrier/amplitude\"\n            args: 0.5\n        }\n    ]\n});\n```\n\n##### Using osc.js with Require.js\n```javascript\n// Define your module paths, including osc.js' dependencies.\n// Note: these paths must resolve to wherever you have placed\n// osc.js, slip.js, and eventEmitter in your project.\nrequire.config({\n    paths: {\n        slip: \"../bower_components/slip.js/dist/slip.min\",\n        EventEmitter: \"../bower_components/eventEmitter/EventEmitter.min\",\n        long: \"../bower_components/long/dist/Long.min\",\n        osc: \"../bower_components/osc.js/osc-module.min\"\n    }\n});\n\n// Load it asynchronously.\nrequire([\"osc\"], function (osc) {\n    // Do something with osc.js when it has fully loaded.\n});\n```\n\n### Web Sockets in Node.js\n\nThe <code>osc.WebSocketPort</code> object supports sending and receiving\nOSC messages over Web Sockets.\n\n#### Options\n\n<table>\n    <tr>\n        <th>Property</th>\n        <th>Description</th>\n        <th>Default Value</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>The Web Socket URL to connect to (required for clients)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>socket</td>\n        <td>A Web Socket instance to bind to (required for servers, optional for clients); if supplied, it is your job to configure and open it appropriately</td>\n        <td>none</td>\n    </tr>\n</table>\n\n#### Sample Code\n\n```javascript\nvar osc = require(\"osc\"),\n    http = require(\"http\"),\n    WebSocket = require(\"ws\");\n\n// Create an Express server app\n// and serve up a directory of static files.\nvar app = require(\"express\").express(),\n    server = app.listen(8081);\n\napp.use(\"/\", express.static(__dirname + \"/static\"));\n\n// Listen for Web Socket requests.\nvar wss = new WebSocket.Server({\n    server: server\n});\n\n// Listen for Web Socket connections.\nwss.on(\"connection\", function (socket) {\n    var socketPort = new osc.WebSocketPort({\n        socket: socket\n    });\n\n    socketPort.on(\"message\", function (oscMsg) {\n        console.log(\"An OSC Message was received!\", oscMsg);\n    });\n});\n```\n\n### UDP in Node.js\n\nThe <code>osc.UDPPort</code> object supports the sending and receiving of\nOSC messages over Node.js's UDP sockets. It also supports broadcast and multicast UDP.\n\n#### Options\n\n<table>\n    <tr>\n        <th>Property</th>\n        <th>Description</th>\n        <th>Default Value</th>\n    </tr>\n    <tr>\n        <td>localPort</td>\n        <td>The port to listen on</td>\n        <td>57121</td>\n    </tr>\n    <tr>\n         <td>localAddress</td>\n         <td>The local address to bind to</td>\n         <td>\"127.0.0.1\"</td>\n    </tr>\n    <tr>\n        <td>remotePort</td>\n        <td>The remote port to send messages to (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>remoteAddress</td>\n        <td>The remote address to send messages to (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>broadcast</td>\n        <td>A flag specifying if messages should be sent via UDP broadcast</td>\n        <td>false</td>\n    </tr>\n    <tr>\n        <td>multicastTTL</td>\n        <td>The time to live (number of hops) for a multicast connection (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>multicastMembership</td>\n        <td>An array of multicast addresses to join when listening for multicast messages (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>socket</td>\n        <td>A raw dgram.Socket to use instead of osc.js creating one for you; if supplied, it is your job to configure and bind it appropriately</td>\n        <td>none</td>\n    </tr>\n</table>\n\n#### Sample Code\n\n```javascript\n// Create an osc.js UDP Port listening on port 57121.\nvar udpPort = new osc.UDPPort({\n    localAddress: \"0.0.0.0\",\n    localPort: 57121\n});\n\n// Listen for incoming OSC bundles.\nudpPort.on(\"bundle\", function (oscBundle, timeTag, info) {\n    console.log(\"An OSC bundle just arrived for time tag\", timeTag, \":\", oscBundle);\n    console.log(\"Remote info is: \", info);\n});\n\n// Open the socket.\nudpPort.open();\n\n// Send an OSC message to, say, SuperCollider\nudpPort.send({\n    address: \"/s_new\",\n    args: [\"default\", 100]\n}, \"127.0.0.1\", 57110);\n```\n\n### Serial in a Chrome App\n\n#### Including osc.js in your Chrome App page\n```html\n<script src=\"../bower_components/osc.js/dist/osc-chromeapp.min.js\"></script>\n```\n\n#### Defining the appropriate permissions in manifest.json\n```json\n{\n    \"name\": \"OSC.js Chrome App Demo\",\n    \"version\": \"1\",\n    \"manifest_version\": 2,\n    \"permissions\": [\n        \"serial\"\n    ],\n    \"app\": {\n        \"background\": {\n            \"scripts\": [\"js/launch.js\"],\n            \"transient\": true\n        }\n    }\n}\n```\n\n#### Connecting to the serial port and listening for OSC messages\n```javascript\n// Instantiate a new OSC Serial Port.\nvar serialPort = new osc.SerialPort({\n    devicePath: \"/dev/cu.usbmodem22131\"\n});\n\n// Listen for the message event and map the OSC message to the synth.\nserialPort.on(\"message\", function (oscMsg) {\n    console.log(\"An OSC message was received!\", oscMsg);\n});\n\n// Open the port.\nserialPort.open();\n```\n\n### UDP in a Chrome App\n\nThe <code>osc.UDPPort</code> object supports the sending and receiving of\nOSC messages over a <code>chrome.sockets.udp</code> socket. It also supports broadcast and multicast UDP.\n\n#### Options\n\n<table>\n    <tr>\n        <th>Property</th>\n        <th>Description</th>\n        <th>Default Value</th>\n    </tr>\n    <tr>\n        <td>localPort</td>\n        <td>The port to listen on</td>\n        <td>57121</td>\n    </tr>\n    <tr>\n         <td>localAddress</td>\n         <td>The local address to bind to</td>\n         <td>\"127.0.0.1\"</td>\n    </tr>\n    <tr>\n        <td>remotePort</td>\n        <td>The remote port to send messages to (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>remoteAddress</td>\n        <td>The remote address to send messages to (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>broadcast</td>\n        <td>A flag specifying if messages should be sent via UDP broadcast</td>\n        <td>false</td>\n    </tr>\n    <tr>\n        <td>multicastTTL</td>\n        <td>The time to live (number of hops) for a multicast connection (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>multicastMembership</td>\n        <td>An array of multicast addresses to join when listening for multicast messages (optional)</td>\n        <td>none</td>\n    </tr>\n    <tr>\n        <td>socketId</td>\n        <td>The id of an existing socket to use instead of osc.js creating one for you; if supplied, it is your job to configure and bind it appropriately</td>\n        <td>none</td>\n    </tr>\n</table>\n\n\nHandling Errors\n---------------\n\nAll osc.js Transport objects emit <code>\"error\"</code> messages whenever an error occurs,\nsuch as when a malformed message is received. You should always listen for errors and\nhandle them in an appropriate manner for your application.\n\n```javascript\nvar port = osc.UDPPort();\nport.on(\"error\", function (error) {\n    console.log(\"An error occurred: \", error.message);\n});\n```\n\nThe low-level osc.js API, described below, will throw JavaScript <code>Error</code> objects whenever an error occurs;\nthey should be caught and handled using\n<code>try</code>/<code>catch</code>.\n\n```javascript\nvar msg;\n\ntry {\n    msg = osc.readPacket(rawPacket);\n} catch (error) {\n    console.log(\"An error occurred: \", error.message);\n}\n```\n\nThe osc.js Low-Level API\n------------------------\n\n### OSC Bundle and Message Objects\n\nosc.js represents bundles and messages as (mostly) JSON-compatible objects. Here's how they are structured:\n\n#### Messages\nOSC Message objects consist of two properties, `address`, which contains the URL-style address path and `args` which is an array of either raw argument values or type-annotated Argument objects (depending on the value of the <code>metadata</code> option used when reading the message).\n\n```javascript\n{\n    address: \"/an/osc/address\",\n    args: [\n        {} // Raw or type-annotated OSC arguments\n    ]\n}\n```\n\n#### Bundles\n\nOSC bundle objects consist of a time tag and an array of `packets`. Packets can be a mix of OSC bundle objects and message objects.\n\n```javascript\n{\n    timeTag: {\n        // OSC Time Tag object\n    },\n    packets: [\n        {} // Nested OSC bundle and message objects>\n    ]\n}\n```\n\n#### Argument Objects with Type Metadata\n\nType-annotated argument objects contain two properties:  `type`, which contains the OSC type tag character (e.g. `\"i\"`, `\"f\"`, `\"t\"`, etc.) and the raw `value`.\n\n```javascript\n{\n    type: \"f\", // OSC type tag string\n    value: 444.4\n}\n```\n\nIf you are using type-annotated arguments, you should also set the <code>metadata</code> option to <code>true</code> when you instantiate your <code>OSCPort</code> instance (or in the <code>options</code> argument to <code>osc.writeMessage</code> if you're using the low-level API).\n\n\n#### Time Tags\nTime tag objects contain two different representations: the raw NTP time and the equivalent (though less precise) native JavaScript timestamp. NTP times consist of a pair of values in an array. The first value represents the number of seconds since January 1, 1900. The second value is a Uint32 value (i.e. between 0 and 4294967296) that represents fractions of a second.\n\nJavaScript timestamps are represented as milliseconds since January 1, 1970, which is the same unit as is returned by calls to `Date.now()`.\n\n```javascript\n{\n    raw: [\n        3608146800, // seconds since January 1, 1900.\n        2147483648  // fractions of a second\n    ],\n    native: Number // Milliseconds since January 1, 1970\n}\n```\n#### Colours\nColours are automatically normalized to CSS 3 rgba values (i.e. the alpha channel is represented as a float from `0.0` to `1.0`).\n\n```javascript\n{\n    r: 255,\n    g: 255,\n    b: 255,\n    a: 1.0\n}\n```\n\n### Functions\n\nThere are two primary functions in osc.js used to read and write OSC data:\n\n<table>\n    <tr>\n        <th>Function</th>\n        <th>Description</th>\n        <th>Arguments</th>\n        <th>Return value</th>\n    </tr>\n    <tr>\n        <td><code>osc.readPacket()</code></td>\n        <td>Decodes binary OSC message into a tree of JavaScript objects containing the messages or bundles that were read.</td>\n        <td>\n            <code>data</code>: A <code>Uint8Array</code> containing the raw data of the OSC packet; <br />\n            <code>options</code>: (optional) An options object, described below; <br />\n            <code>offsetState</code>: (optional) an offset state object containing an <code>idx</code> property that specifies the offset index into <code>data</code>; <br />\n            <code>length</code> the length (in bytes) to read from <code>data</code>\n        </td>\n        <td>An osc.js message or bundle object</td>\n    </tr>\n    <tr>\n        <td><code>osc.writePacket()</code></td>\n        <td>Writes an OSC message or bundle object to a binary array.</td>\n        <td>\n            <code>packate</code>: An osc.js message or bundle object;<br />\n            <code>options</code>: (optional) An options object, described below<br />\n        </td>\n        <td>A <code>Uint8Array</code></td>\n    </tr>\n</table>\n\n### Options\n\nMany osc.js functions take an <code>options</code> object that can be used to customize its behaviour. These options are also supported by all <code>osc.Port</code> objects, and can be included as a parameter in the <code>options</code> arguments passed to any <code>Port</code> constructor. The supported fields in an options object are:\n\n* <code>metadata</code>: specifies if the OSC type metadata should be included. By default, type metadata isn't included when reading packets, and is inferred automatically when writing packets. If you need greater precision in regards to the arguments in an OSC message, set the <code>metadata</code> argument to true. Defaults to <code>false</code>.\n* <code>unpackSingleArgs</code>: specifies if osc.js should automatically unpack single-argument messages so that their <code>args</code> property isn't wrapped in an array. Defaults to <code>true</code>.\n\n\nMapping OSC to JS\n------------------\n\nHere are a few examples showing how OSC packets are mapped to plain JavaScript objects by osc.js.\n\n<table>\n    <tr>\n        <th>Message</th>\n        <th>Objects</th>\n    </tr>\n    <tr>\n        <td>\"/carrier/freq\" \",f\" 440.4</td>\n        <td><pre><code>{\n  address: \"/carrier/freq\",\n  args: [440.4]\n}</pre></code></td>\n    </tr>\n    <tr>\n        <td>\"/float/andArray\" \",f[ff]\" 440.4 42 47</td>\n        <td><pre><code>{\n  address: \"/carrier/freq\",\n  args: [\n    440.4, [42.0, 47.0]\n  ]\n}</pre></code></td>\n    </tr>\n    <tr>\n        <td>\"/aTimeTag\" \",t\" 3608146800 2147483648</td>\n        <td><pre><code>{\n  address: \"/scheduleAt\",\n  args: [\n    {\n      raw: [3608146800, 2147483648],\n      jsTime: 1399158000500\n    }\n  ]\n}</code></pre>\n    </tr>\n    <tr>\n        <td>\"/blob\" \",b\" 0x63 0x61 0x74 0x21</td>\n        <td><pre><code>\n{\n  address: \"/blob\",\n  args: [\n    Uint8Aray([0x63, 0x61, 0x74, 0x21])\n  ]\n}\n    <tr>\n        <td>\"/colour\" \",r\" \"255 255 255 255\"</td>\n        <td><pre><code>{\n  address: \"/colour\",\n  args: [{\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1.0\n    }\n  ]\n}</pre></code</td>\n    <tr>\n        <td>\"/midiMessage\" \",m\" 0x00 0x90 0x45 0x65</td>\n        <td><pre><code>{\n  address: \"/midiMessage\",\n  args: [\n    // Port ID, Status, Data 1, Data 2\n    Uint8Array([0, 144, 69, 101])\n  ]\n}</pre></code</td>\n</table>\n\nLicense\n-------\n\nosc.js is maintained by Colin Clark and distributed under the MIT and GPL 3 licenses.\n\nSupported Environments\n----------------------\n\nosc.js releases are tested in Chrome, Firefox, Safari, and Microsoft Edge on Mac OS X and Windows, and in Node.js 4.2.0 (LTS) and 0.10.40 on Mac OS X and Linux.\n\nContributing to osc.js\n----------------------\n\nContributions and pull requests to osc.js are hugely appreciated. Wherever possible, all fixes and new features should be accompanied by unit tests to help verify that they work and avoid regressions. When new features are introduced, a pull request to the [osc.js-examples repository](https://github.com/colinbdclark/osc.js-examples) with an example of how to use it is also appreciated.\n\nCode should follow the style conventions of the project (such as they are), which can be automatically validated using JSHint by running <code>grunt jshint</code>.\n\nCurrently, the project is maintained by one person; sometimes it will take a bit of time to respond, review, and merge contributions. Help with bug triage, code reviews, testing, and examples is also welcome.\n\n## How to Build and Test Your Contributions\n\nosc.js depends on npm and Grunt. Make sure you have these installed, and then run the following commands to fetch all necessary dependencies:\n\n    npm install\n    npm run dedupe-infusion\n\nTo lint and generate builds from new source code:\n\n    grunt\n\nRunning the unit tests:\n\n1. To run the Node.js unit tests, run <code>npm run clean-test</code>\n2. In the browser, open <code>tests/all-tests.html</code>\n3. To run the tests in a Vagrant VM under Node.js 0.10.40, run <code>vagrant up</code>\n\nContributors\n------------\n\n * @colinbdclark wrote osc.js.\n * @jacoscaz and @xseignard fixed bugs.\n * @drart made and helped test some examples.\n * @egasimus added support for 64-bit integers.\n * @heisters contributed fixes for broadcast and multicast UDP on Node.js and improved time tag support.\n * @tambien fixed error handling bugs in the transports layer.\n * @janslow added support for passing remote information to all Port data events.\n",
  "_id": "osc@2.1.0",
  "_shasum": "fda9a16debffac09b208c9bc25aab1eba6cf5dee",
  "_from": "git://github.com/colinbdclark/osc.js.git#gh-65",
  "_resolved": "git://github.com/colinbdclark/osc.js.git#d83bc86983d71f1fdc214b8ec037abd3663dbe26"
}
